// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(uuid()) @db.Uuid
  email          String        @unique
  passwordHash   String        @map("password_hash")
  emailVerified  Boolean       @default(false) @map("email_verified")
  role           UserRole      @default(user)
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")

  profile                  Profile?
  applications             Application[]
  refreshTokens            RefreshToken[]
  emailVerificationTokens  EmailVerificationToken[]
  passwordResetTokens      PasswordResetToken[]
  applicationSettings      ApplicationSettings[]

  @@map("users")
}

model Profile {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @map("user_id") @db.Uuid
  fullName  String   @map("full_name")
  phone     String
  city      String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Application {
  id            String            @id @default(uuid()) @db.Uuid
  userId        String            @map("user_id") @db.Uuid
  category      ApplicationCategory
  summary       String            @db.Text
  planFilePath  String?           @map("plan_file_path")
  videoFilePath String?           @map("video_file_path")
  status        ApplicationStatus @default(draft)
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")

  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("applications")
}

model Contact {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String
  message   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  @@map("contacts")
}

model Template {
  id           String   @id @default(uuid()) @db.Uuid
  name         String
  fileName     String   @map("file_name")
  filePath     String   @map("file_path")
  fileSize     Int      @map("file_size")
  mimeType     String   @map("mime_type")
  uploadedById String   @map("uploaded_by_id") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("templates")
}

model ApplicationSettings {
  id           String   @id @default(uuid()) @db.Uuid
  settingKey   String   @unique @map("setting_key")
  settingValue Json     @map("setting_value")
  updatedById  String   @map("updated_by_id") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  updatedBy    User     @relation(fields: [updatedById], references: [id])

  @@map("application_settings")
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

enum ApplicationCategory {
  starter
  active
  it
}

enum ApplicationStatus {
  draft
  submitted
}

enum UserRole {
  user
  admin
}